#+title: Emacs Configuration
#+PROPERTY: header-args:emacs-lisp :tangle ./init.el :mkdirp yes

* Intro

This file generates [[file:init.el][init.el]] for emacs to load at startup.
This is based on the [[https://github.com/daviwil/emacs-from-scratch][Emacs From Scratch]] Series by [[https://www.youtube.com/@SystemCrafters][System Crafters]]


* Package System Setup

Wil use [[https://github.com/jwiegley/use-package][use-package]] to make it easier to automate the installation and configuration.

#+begin_src emacs-lisp

  (add-to-list 'load-path "~/.emacs.d/personal")

  ;; ------------------------------------------------------------
  ;; INSTALL PACKAGES
  ;; ------------------------------------------------------------
  (require 'package)

  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                           ("org" . "https://orgmode.org/elpa/")
                           ("elpa" . "https://elpa.gnu.org/packages/")))

  (package-initialize)
  (unless package-archive-contents
    (package-refresh-contents))

  ;; Initialize use-package on non-Linux platforms
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))

  (require 'use-package)
  (setq use-package-always-ensure t)

#+end_src

** Automatic Package Updates

This mantains the packages updated every week.

#+begin_src emacs-lisp

  (use-package auto-package-update
    :custom
    (auto-package-update-interval 7)
    (auto-package-update-prompt-before-update t)
    (auto-package-update-hide-results t)
    :config
    (auto-package-update-maybe)
    (auto-package-update-at-time "09:00"))
  
#+end_src

 
* Basic UI Configuration

This section configures basic UI settings that makes Emacs look nicer.

#+begin_src emacs-lisp

  ;; ------------------------------------------------------------
  ;; BASIC CUSTOMIZATION
  ;; ------------------------------------------------------------

  (setq image-types (cons 'svg image-types)) ;: Fix svg error in MacOS
  (setq inhibit-startup-message t) ;; hide the startup message
  (global-display-line-numbers-mode t) ;; enable line numbers globally
  (tool-bar-mode -1)    ;; disable toolbar
  (menu-bar-mode -1)    ;; disable menubar
  (setq column-number-mode t) ;; show column number
  (setq calendar-date-style "iso")			     ;; set iso format for dates
  (add-to-list 'initial-frame-alist '(fullscreen . maximized)) ;; maximize frame at startup
  (global-auto-revert-mode t) ; refresh buffer when changed by other source

  ;; Disable line numbers for some modes
  (dolist (mode '(org-mode-hook
                  term-mode-hook
                  shell-mode-hook
                  treemacs-mode-hook
                  eshell-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))

#+end_src

Enable windmove to switch between windows by pressing S-<left>, S-<right>, S-<up>, S-<down>
#+begin_src emacs-lisp

;; Enable windmove default keybindings
(windmove-default-keybindings)

#+end_src

#+begin_src emacs-lisp
  ;; Use font 'Kochi Gothic' for Japanese text
(set-fontset-font "fontset-default" 'han "Kochi Gothic")
#+end_src

* Key bindings

#+begin_src emacs-lisp

  (global-set-key (kbd "M-i") 'imenu)	     ; bind Imenu to M-i
  (global-set-key (kbd "C-x g") 'magit-status) ; magit
  (global-set-key (kbd "C-c o") #'crux-open-with) ; open with external application
  (global-set-key "\C-cl" 'org-store-link)
  (global-set-key "\C-ca" 'org-agenda)
  (global-set-key "\C-cb" 'org-iswitchb)
  (global-set-key "\C-cj" 'org-journal-new-entry)
#+end_src


* UI Configuration

** Color Theme

#+begin_src emacs-lisp

  ;; Install doom packages
  (use-package doom-themes
    :init (load-theme 'doom-spacegrey t)
    )

#+end_src

** Modeline
[[https://github.com/seagle0128/doom-modeline][doom-modeline]] is a very attractive and rich (yet still minimal) mode line configuration for Emacs.
To see the icons we need to install [[https://github.com/domtronn/all-the-icons.el][all-the-icons]] package. Once installed we need to install the fonts with
#+begin_src emacs-lisp :tangle no
  M-x all-the-icons-install-fonts
#+end_src

#+begin_src emacs-lisp

  (use-package all-the-icons
    :if (display-graphic-p))

  (use-package doom-modeline
    :init (doom-modeline-mode 1)
    :custom ((doom-modeline-height 15)))
  ;; Whether display the environment version.
  (setq doom-modeline-env-version t)

#+end_src

[[https://github.com/justbur/emacs-which-key][which-key]] is a useful UI panel that appears when you start pressing any key binding in Emacs to offer you all possible completions for the prefix.  For example, if you press =C-c= (hold control and press the letter =c=), a panel will appear at the bottom of the frame displaying all of the bindings under that prefix and which command they run.  This is very useful for learning the possible key bindings in the mode of your current buffer.

#+begin_src emacs-lisp

  (use-package which-key
    :defer 0
    :diminish which-key-mode
    :config
    (which-key-mode)
    (setq which-key-idle-delay 1))

#+end_src

** Completion

*** [[http://elpa.gnu.org/packages/vertico.html][Vertico]] provides a performant and minimalistic vertical completion UI based on the default completion system. The focus of Vertico is to provide a UI which behaves correctly under all circumstances.

#+begin_src emacs-lisp
  ;; Enable vertico
  (use-package vertico
    :init
    (vertico-mode)

    ;; Different scroll margin
    ;; (setq vertico-scroll-margin 0)

    ;; Show more candidates
    ;; (setq vertico-count 20)

    ;; Grow and shrink the Vertico minibuffer
    ;; (setq vertico-resize t)

    ;; Optionally enable cycling for `vertico-next' and `vertico-previous'.
    ;; (setq vertico-cycle t)
    )

  ;; Persist history over Emacs restarts. Vertico sorts by history position.
  (use-package savehist
    :init
    (savehist-mode))

  ;; A few more useful configurations...
  (use-package emacs
    :init
    ;; Add prompt indicator to `completing-read-multiple'.
    ;; We display [CRM<separator>], e.g., [CRM,] if the separator is a comma.
    (defun crm-indicator (args)
      (cons (format "[CRM%s] %s"
                    (replace-regexp-in-string
                     "\\`\\[.*?]\\*\\|\\[.*?]\\*\\'" ""
                     crm-separator)
                    (car args))
            (cdr args)))
    (advice-add #'completing-read-multiple :filter-args #'crm-indicator)

    ;; Do not allow the cursor in the minibuffer prompt
    (setq minibuffer-prompt-properties
          '(read-only t cursor-intangible t face minibuffer-prompt))
    (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

    ;; Emacs 28: Hide commands in M-x which do not work in the current mode.
    ;; Vertico commands are hidden in normal buffers.
    ;; (setq read-extended-command-predicate
    ;;       #'command-completion-default-include-p)

    ;; Enable recursive minibuffers
    (setq enable-recursive-minibuffers t))

 
#+end_src

**** [[https://elpa.gnu.org/packages/marginalia.html][Marginalia]]. This package provides marginalia-mode which adds marginalia to the minibuffer completions

#+begin_src emacs-lisp
  ;; Enable rich annotations using the Marginalia package
  (use-package marginalia
    ;; Either bind `marginalia-cycle' globally or only in the minibuffer
    :bind (("M-A" . marginalia-cycle)
           :map minibuffer-local-map
           ("M-A" . marginalia-cycle))

    ;; The :init configuration is always executed (Not lazy!)
    :init

    ;; Must be in the :init section of use-package such that the mode gets
    ;; enabled right away. Note that this forces loading the package.
    (marginalia-mode))
#+end_src

**** [[https://elpa.gnu.org/packages/orderless.html][Orderless]]. This package provides an orderless completion style that divides the pattern into space-separated components, and matches candidates that match all of the components in any order.

#+begin_src emacs-lisp
  (use-package orderless
    :ensure t
    :custom
    (completion-styles '(orderless basic))
    (completion-category-overrides '((file (styles basic partial-completion)))))
#+end_src

**** [[http://elpa.gnu.org/packages/consult.html][Consult]] provides search and navigation commands based on the Emacs completion function completing-read.

This is a minimal config
#+begin_src emacs-lisp

  ;; Minimal configuration for Consult

  (use-package consult
    ;; Replace bindings. Lazily loaded due by `use-package'.
    :bind (("C-s" . consult-line)
           ("C-M-l" . consult-imenu)
           :map minibuffer-local-map
           ("C-r" . consult-history))
    ;; Enable automatic preview at point in the *Completions* buffer. This is
    ;; relevant when you use the default completion UI.
    :hook (completion-list-mode . consult-preview-at-point-mode)
    )

#+end_src

* Org Mode

[[https://orgmode.org/][Org Mode]] is one of the hallmark features of Emacs.  It is a rich document editor, project planner, task and time tracker, blogging engine, and literate coding utility all wrapped up in one package.

** Better Font Faces

The =efs/org-font-setup= function configures various text faces to tweak the sizes of headings and use variable width fonts in most cases so that it looks more like we're editing a document in =org-mode=.  We switch back to fixed width (monospace) fonts for code blocks and tables so that they display correctly.

#+begin_src emacs-lisp

  (defun efs/org-font-setup ()
    ;; Replace list hyphen with dot
    (font-lock-add-keywords 'org-mode
                            '(("^ *\\([-]\\) "
                               (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))

    ;; Set faces for heading levels
    (dolist (face '((org-level-1 . 1.2)
                    (org-level-2 . 1.1)
                    (org-level-3 . 1.05)
                    (org-level-4 . 1.0)
                    (org-level-5 . 1.1)
                    (org-level-6 . 1.1)
                    (org-level-7 . 1.1)
                    (org-level-8 . 1.1)))
      ;; (set-face-attribute (car face) nil :font "Cantarell" :weight 'regular :height (cdr face))
      )

    ;; Ensure that anything that should be fixed-pitch in Org files appears that way
    (set-face-attribute 'org-block nil    :foreground nil :inherit 'fixed-pitch)
    (set-face-attribute 'org-table nil    :inherit 'fixed-pitch)
    (set-face-attribute 'org-formula nil  :inherit 'fixed-pitch)
    (set-face-attribute 'org-code nil     :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-table nil    :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-checkbox nil  :inherit 'fixed-pitch)
    ;; (set-face-attribute 'line-number nil :inherit 'fixed-pitch)
    ;; (set-face-attribute 'line-number-current-line nil :inherit 'fixed-pitch)
    )

#+end_src

** Basic Config

#+begin_src emacs-lisp

  (defun efs/org-mode-setup ()
    (org-indent-mode)
    (variable-pitch-mode 1)
    (visual-line-mode 1))

  (use-package org
    :pin org
    :commands (org-capture org-agenda)
    :hook (org-mode . efs/org-mode-setup)
    :config
    (setq org-ellipsis " ▾")

    ;; The following lines are always needed.  Choose your own keys.
    (add-to-list 'auto-mode-alist '("\\.org\\'" . org-mode))
    (global-set-key "\C-cl" 'org-store-link)
    (global-set-key "\C-ca" 'org-agenda)
    (global-set-key "\C-cb" 'org-iswitchb)


    ;; Agenda log mode
    (setq org-agenda-start-with-log-mode t)
    (setq org-log-done 'time)
    (setq org-log-into-drawer t)

    ;; Change asterisks for bullets
    (use-package org-bullets
      :hook (org-mode . org-bullets-mode)
      :custom
      (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))

    ;; Allow list with alphabetical charaters 'a.', 'A.', 'a)', and 'A)'
    (setq org-list-allow-alphabetical t)

    ;; Center org-mode buffers horizontally
    (defun efs/org-mode-visual-fill ()
      (setq visual-fill-column-width 100
            visual-fill-column-center-text t)
      (visual-fill-column-mode 1))

    (use-package visual-fill-column
      :hook (org-mode . efs/org-mode-visual-fill))

    ;; Run font set
    (efs/org-font-setup))

  ;; Agenda files
  (setq org-agenda-files '("~/Dropbox/org/agenda/"))

  ;; org-habits
  (require 'org-habit)
  (add-to-list 'org-modules 'org-habit)
  (setq org-habit-graph-column 60)

  ;; TODO dependencies
  ;; (add-hook 'org-mode-hook 'org-enforce-todo-dependencies)

  (defun org-summary-todo (n-done n-not-done)
    "Switch entry to DONE when all subentries are done, to TODO otherwise"
    (let (org-log-done org-log-states)    ;turn off logging
      (org-todo (if (= n-not-done 0) "DONE" "TODO"))))

  (add-hook 'org-after-todo-statistics-hook 'org-summary-todo)

  ;; TODO faces
  (setq org-todo-keyword-faces
        '(("TODO" . org-warning) ("STARTED" . "yellow")
          ("CANCELLED" . (:foreground "orange" :weight bold))))

  ;; Filtering functions
  (defun air-org-skip-subtree-if-priority (priority)
    "Skip an agenda subtree if it has a priority of PRIORITY.

    PRIORITY may be one of the characters ?A, ?B, or ?C."
    (let ((subtree-end (save-excursion (org-end-of-subtree t)))
          (pri-value (* 1000 (- org-lowest-priority priority)))
          (pri-current (org-get-priority (thing-at-point 'line t))))
      (if (= pri-value pri-current)
          subtree-end
        nil)))

  (defun air-org-skip-subtree-if-habit ()
    "Skip an agenda entry if it has a STYLE property equal to \"habit\"."
    (let ((subtree-end (save-excursion (org-end-of-subtree t))))
      (if (string= (org-entry-get nil "STYLE") "habit")
          subtree-end
        nil)))

  ;; Custom agenda views
  (setq org-agenda-custom-commands
        '(("d" "Daily agenda and all TODOs"
           ((tags "PRIORITY=\"A\""
                  ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                   (org-agenda-overriding-header "High-priority unfinished tasks:")))
            (agenda "" ((org-agenda-ndays 1)))
            (alltodo ""
                     ((org-agenda-skip-function '(or (air-org-skip-subtree-if-habit)
                                                     (air-org-skip-subtree-if-priority ?A)
                                                     (org-agenda-skip-if nil '(scheduled deadline))))
                      (org-agenda-overriding-header "ALL normal priority tasks:")))))))

  ;; org-journal
  (use-package org-journal
    :ensure t
    :defer t
    :custom
    (org-journal-dir "~/Dropbox/org/journal/")
    (org-journal-date-format "%A, %Y/%m/%d"))

  ;; capture templates
  (setq org-capture-templates
        `(("t" "Tasks / Projects")
          ("tt" "Task TODO" entry (file+olp "~/Dropbox/org/agenda/personal.org" "Tasks")
           "* TODO %?\n  %U\n  %a\n  %i" :empty-lines 1)
          ("td" "Task DEADLINE" entry (file+olp "~/Dropbox/org/agenda/personal.org" "Tasks")
           "* TODO %?\nDEADLINE: %^T\n%U" :empty-lines 1)
          ("te" "Event" entry (file+olp "~/Dropbox/org/agenda/personal.org" "Events")
           "* TODO %? \nSCHEDULED: %^T\n%U" :empty-lines 1)

          ("s" "SIDE")
          ("st" "Task" entry (file+olp "~/Dropbox/org/agenda/SIDE.org" "Tasks")
           "* TODO %?\n  %U" :empty-lines 1)
          ("sd" "DEADLINE" entry (file+olp "~/Dropbox/org/agenda/SIDE.org" "Tasks")
           "* TODO %?\nDEADLINE: %^T\n%U" :empty-lines 1)
          ("se" "Schedule" entry (file+olp "~/Dropbox/org/agenda/SIDE.org" "Tasks")
           "* TODO %? \nSCHEDULED: %^T\n%U" :empty-lines 1)))
  ;; Set global key
  (define-key global-map (kbd "C-c k")
    (lambda () (interactive) (org-capture nil)))
#+End_src

** TeX

Tex is a typesetting language. More info in [[https://tug.org/begin.html][Tex Userg Groups]]

*** Installing Tex Live

In order to use LaTeX in Emacs we need a working LaTeX installation.

**** Unix/GNU/Linux 

[[https://tug.org/texlive/quickinstall.html][Tex Live]]

Add this to ~/.profile *Depends on version installed*

#+begin_src shell :tangle no
# TeX Live
PATH="/usr/local/texlive/2022/bin/x86_64-linux:$PATH"
export MANPATH=":/usr/local/texlive/2022/texmf-dist/doc/man"
export INFOPATH=":/usr/local/texlive/2022/texmf-dist/doc/info"
#+end_src

This is dependent on the distribution, for Tex Live 2022

#+begin_src emacs-lisp
  ;; Tex binaries
  (cond
     ((string-equal system-type "gnu/linux") 	;Check linux
      (setq exec-path (append exec-path '("/usr/local/texlive/2022/bin/x86_64-linux")))))

#+end_src

**** Mac

[[https://tug.org/mactex/][MacTex Download]]

This is dependent on the distribution, for MacTex (recommended version for Mac)

#+begin_src emacs-lisp
  (cond
     ((string-equal system-type "darwin") 	;Check macOS
      (setq exec-path (append exec-path '("/Library/Tex/texbin")))))

#+end_src

*** AUCTeX

[[https://www.gnu.org/software/auctex/manual/auctex.html][AUCTeX]] is a comprehensive customizable integrated environment for writing input files for TeX, LaTeX, ConTeXt, Texinfo, and docTeX using Emacs.

#+begin_src emacs-lisp
  ;; Install auctex package
  (use-package tex
    :ensure auctex)
  ;; Enable auto save and document parsing
  (setq TeX-auto-save t)
  (setq TeX-parse-self t)
  ;; Ask for master file every time a new file is opened
  (setq-default TeX-master nil)

#+end_src

** Configure Babel Languages

To execute or export code in =org-mode= code blocks, you'll need to set up =org-babel-load-languages= for each language you'd like to use.  [[https://orgmode.org/worg/org-contrib/babel/languages.html][This page]] documents all of the languages that you can use with =org-babel=.

#+begin_src emacs-lisp

    (with-eval-after-load 'org
      (org-babel-do-load-languages
          'org-babel-load-languages
          '((emacs-lisp . t)
            (python . t)
            (latex . t)))

      (push '("conf-unix" . conf-unix) org-src-lang-modes))

#+end_src

*** Structure Templates

Org Mode's [[https://orgmode.org/manual/Structure-Templates.html][structure templates]] feature enables you to quickly insert code blocks into your Org files in combination with =org-tempo= by typing =<= followed by the template name like =el= or =py= and then press =TAB=.  For example, to insert an empty =emacs-lisp= block below, you can type =<el= and press =TAB= to expand into such a block.

You can add more =src= block templates below by copying one of the lines and changing the two strings at the end, the first to be the template name and the second to contain the name of the language [[https://orgmode.org/worg/org-contrib/babel/languages/index.html][as it is known by Org Babel]].

#+begin_src emacs-lisp

  (with-eval-after-load 'org
    ;; This is needed as of Org 9.2
    (require 'org-tempo)

    (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
    (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
    (add-to-list 'org-structure-template-alist '("py" . "src python"))
    (add-to-list 'org-structure-template-alist '("tex" . "src latex")))

#+end_src

*** Auto-tangle Configuration Files

This snippet adds a hook to =org-mode= buffers so that =efs/org-babel-tangle-config= gets executed each time such a buffer gets saved.  This function checks to see if the file being saved is the Emacs.org file you're looking at right now, and if so, automatically exports the configuration here to the associated output files.

#+begin_src emacs-lisp

  ;; Automatically tangle our Emacs.org config file when we save it
  (defun efs/org-babel-tangle-config ()
    (when (string-equal (file-name-directory (buffer-file-name))
                        (expand-file-name user-emacs-directory))
      ;; Dynamic scoping to the rescue
      (let ((org-confirm-babel-evaluate nil))
        (org-babel-tangle))))

  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'efs/org-babel-tangle-config)))

#+end_src


* Development

** Magit

#+begin_src emacs-lisp

  (use-package magit
    :commands magit-status)
  
#+end_src

** Languages

*** IDE Features with lsp-mode

**** lsp-mode

We use the excellent [[https://emacs-lsp.github.io/lsp-mode/][lsp-mode]] to enable IDE-like functionality for many different programming languages via "language servers" that speak the [[https://microsoft.github.io/language-server-protocol/][Language Server Protocol]].

#+begin_src emacs-lisp

  (defun efs/lsp-mode-setup ()
    (setq lsp-headerline-breadcrumb-segments '(path-up-to-project file symbols))
    (lsp-headerline-breadcrumb-mode))

  (use-package lsp-mode
    :commands lsp-deferred
    :hook (lsp-mode . efs/lsp-mode-setup)
    :init
    (setq lsp-keymap-prefix "C-c l")  ;; Or 'C-l', 's-l'
    :config
    (lsp-enable-which-key-integration t))

#+end_src

**** lsp-ui

Is a set of UI enhancements built on top of =lsp-mode= which make Emacs feel even more like an IDE.

#+begin_src emacs-lisp

  (use-package lsp-ui
    :hook (lsp-mode . lsp-ui-mode)
    :custom
    (lsp-ui-doc-position 'bottom))

#+end_src


**** lsp-treemacs

[[https://github.com/emacs-lsp/lsp-treemacs][lsp-treemacs]] provides nice tree views for different aspects of your code like symbols in a file, references of a symbol, or diagnostic messages (errors and warnings) that are found in your code.

#+begin_src emacs-lisp

  (use-package lsp-treemacs
    :after lsp)

#+end_src

**** lsp-helm
#+begin_src emacs-lisp
  (use-package helm-lsp
    :commands helm-lsp-workspace-symbol
    :after lsp)
#+end_src

*** Debugging with dap-mode

[[https://emacs-lsp.github.io/dap-mode/][dap-mode]] is an excellent package for bringing rich debugging capabilities to Emacs via the [[https://microsoft.github.io/debug-adapter-protocol/][Debug Adapter Protocol]].  You should check out the [[https://emacs-lsp.github.io/dap-mode/page/configuration/][configuration docs]] to learn how to configure the debugger for your language.  Also make sure to check out the documentation for the debug adapter to see what configuration parameters are available to use for your debug templates!

#+begin_src emacs-lisp

  (use-package dap-mode
    ;; Uncomment the config below if you want all UI panes to be hidden by default!
    ;; :custom
    ;; (lsp-enable-dap-auto-configure nil)
    ;; :config
    ;; (dap-ui-mode 1)
    :commands dap-debug
    :config
    ;; Set up Node debugging
    (require 'dap-node)
    (dap-node-setup)) ;; Automatically installs Node debug adapter if needed

#+end_src

*** TypeScript / JavaScript

This is a basic configuration for the TypeScript language so that =.ts= files activate =typescript-mode= when opened.  We're also adding a hook to =typescript-mode-hook= to call =lsp-deferred= so that we activate =lsp-mode= to get LSP features every time we edit TypeScript code.

#+begin_src emacs-lisp

  (use-package typescript-mode
    :mode "\\.ts\\'"
    :hook (typescript-mode . lsp-deferred)
    :config
    (setq typescript-indent-level 2))

#+end_src

#+begin_src emacs-lisp

  (use-package js2-mode
    :mode "\\.js\\'"
    :hook (js2-mode . lsp-deferred)
    :config
    (setq javascript-indent-level 2))

#+end_src

*Important note!*  For =lsp-mode= to work with TypeScript (and JavaScript) you will need to install a language server on your machine.  If you have Node.js installed, the easiest way to do that is by running the following command:

#+begin_src shell :tangle no

npm install -g typescript-language-server typescript

#+end_src

*** Python

We use =lsp-mode= and =dap-mode= to provide a more complete development environment for Python in Emacs.  Check out [[https://emacs-lsp.github.io/lsp-mode/page/lsp-pyls/][the =pyls= configuration]] in the =lsp-mode= documentation for more details.

Make sure you have the =pyls= language server installed before trying =lsp-mode=!

#+begin_src sh :tangle no

pip install --user "python-lsp-server[all]"

#+end_src

There are a number of other language servers for Python so if you find that =pyls= doesn't work for you, consult the =lsp-mode= [[https://emacs-lsp.github.io/lsp-mode/page/languages/][language configuration documentation]] to try the others!

#+begin_src emacs-lisp

  (use-package python-mode
    :ensure t
    :hook (python-mode . lsp-deferred)
    :custom
    ;; NOTE: Set these if Python 3 is called "python3" on your system!
    (python-shell-interpreter "python3")
    (dap-python-executable "python3")
    (dap-python-debugger 'debugpy)
    :config
    (require 'dap-python))


#+end_src

You can use the pyvenv package to use =virtualenv= environments in Emacs.  The =pyvenv-activate= command should configure Emacs to cause =lsp-mode= and =dap-mode= to use the virtual environment when they are loaded, just select the path to your virtual environment before loading your project.

#+begin_src emacs-lisp

  (use-package pyvenv
    :after python-mode
    :config
    (pyvenv-mode 1))

#+end_src

** Company Mode

[[http://company-mode.github.io/][Company Mode]] provides a nicer in-buffer completion interface than =completion-at-point= which is more reminiscent of what you would expect from an IDE.  We add a simple configuration to make the keybindings a little more useful (=TAB= now completes the selection and initiates completion at the current location if needed).

We also use [[https://github.com/sebastiencs/company-box][company-box]] to further enhance the look of the completions with icons and better overall presentation.

#+begin_src emacs-lisp

  (use-package company
    ;; :after lsp-mode
    ;; :hook (lsp-mode . company-mode)
    :bind (:map company-active-map
           ("<tab>" . company-complete-selection))
          (:map lsp-mode-map
           ("<tab>" . company-indent-or-complete-common))
    :custom
    (company-minimum-prefix-length 1)
    (company-idle-delay 0.5))


  (use-package company-box
    :hook (company-mode . company-box-mode))

#+end_src

** YASnippet

#+begin_src emacs-lisp
  (use-package yasnippet
    :custom (yas-global-mode 1))
#+end_src


* macOS

** Ispell

In macOS I had to install Hunspell to make it work from Homebrew
Then download the dictionary file from [[https://cgit.freedesktop.org/libreoffice/dictionaries/tree/en][here]]

#+begin_src emacs-lisp

  ;; Set $DICPATH to "$HOME/Library/Spelling" for hunspell.
  (cond
   ((string-equal system-type "darwin") 	;Check macOS
    (progn
      (setenv
       "DICPATH"
       (concat (getenv "HOME") "/Library/Spelling"))
      (setenv "DICTIONARY" "en_US")
      ;; Tell ispell-mode to use hunspell.
      (setq
       ispell-program-name
       "/usr/local/bin/hunspell"))))

#+end_src

** exec-path-from-shell

Ever find that a command works in your shell, but not in Emacs?

This happens a lot on OS X, where an Emacs instance launched as a GUI app inherits a default minimal set of environment variables that are probably not the ones you see in a terminal window. Similarly, if you start Emacs as a daemon from systemd or launchd, it will run with a default set of environment variables.

This library solves this problem by copying important environment variables from the user's shell: it works by asking your shell to print out the variables of interest, then copying them into the Emacs environment.

#+begin_src emacs-lisp

  (use-package exec-path-from-shell)
    (when (memq window-system '(mac ns x))
      ;; (dolist (var '("SSH_AUTH_SOCK" "SSH_AGENT_PID" "GPG_AGENT_INFO" "LANG" "LC_CTYPE" "NIX_SSL_CERT_FILE" "NIX_PATH"))
        ;; (add-to-list 'exec-path-from-shell-variables var))
      (exec-path-from-shell-initialize))

#+end_src


